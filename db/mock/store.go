// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dorasaicu12/simplebank/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/dorasaicu12/simplebank/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/dorasaicu12/simplebank/db/sqlc"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccountBalance mocks base method.
func (m *MockStore) AddAccountBalance(ctx context.Context, arg db.AddAccountBalanceParams) (db.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBalance", ctx, arg)
	ret0, _ := ret[0].(db.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountBalance indicates an expected call of AddAccountBalance.
func (mr *MockStoreMockRecorder) AddAccountBalance(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBalance", reflect.TypeOf((*MockStore)(nil).AddAccountBalance), ctx, arg)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(ctx context.Context, arg db.CreateAccountParams) (db.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, arg)
	ret0, _ := ret[0].(db.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), ctx, arg)
}

// CreateEntrie mocks base method.
func (m *MockStore) CreateEntrie(ctx context.Context, arg db.CreateEntrieParams) (db.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntrie", ctx, arg)
	ret0, _ := ret[0].(db.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntrie indicates an expected call of CreateEntrie.
func (mr *MockStoreMockRecorder) CreateEntrie(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntrie", reflect.TypeOf((*MockStore)(nil).CreateEntrie), ctx, arg)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(ctx context.Context, arg db.CreateSessionParams) (db.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(db.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), ctx, arg)
}

// CreateTransfers mocks base method.
func (m *MockStore) CreateTransfers(ctx context.Context, arg db.CreateTransfersParams) (db.Transfers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfers", ctx, arg)
	ret0, _ := ret[0].(db.Transfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfers indicates an expected call of CreateTransfers.
func (mr *MockStoreMockRecorder) CreateTransfers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfers", reflect.TypeOf((*MockStore)(nil).CreateTransfers), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), ctx, id)
}

// DeleteEntrie mocks base method.
func (m *MockStore) DeleteEntrie(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntrie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntrie indicates an expected call of DeleteEntrie.
func (mr *MockStoreMockRecorder) DeleteEntrie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntrie", reflect.TypeOf((*MockStore)(nil).DeleteEntrie), ctx, id)
}

// DeleteTransfers mocks base method.
func (m *MockStore) DeleteTransfers(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransfers", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransfers indicates an expected call of DeleteTransfers.
func (mr *MockStoreMockRecorder) DeleteTransfers(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransfers", reflect.TypeOf((*MockStore)(nil).DeleteTransfers), ctx, id)
}

// GetAccount mocks base method.
func (m *MockStore) GetAccount(ctx context.Context, id int64) (db.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, id)
	ret0, _ := ret[0].(db.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStoreMockRecorder) GetAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), ctx, id)
}

// GetAccountForUpdate mocks base method.
func (m *MockStore) GetAccountForUpdate(ctx context.Context, id int64) (db.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountForUpdate", ctx, id)
	ret0, _ := ret[0].(db.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountForUpdate indicates an expected call of GetAccountForUpdate.
func (mr *MockStoreMockRecorder) GetAccountForUpdate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountForUpdate", reflect.TypeOf((*MockStore)(nil).GetAccountForUpdate), ctx, id)
}

// GetEntrie mocks base method.
func (m *MockStore) GetEntrie(ctx context.Context, id int64) (db.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntrie", ctx, id)
	ret0, _ := ret[0].(db.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntrie indicates an expected call of GetEntrie.
func (mr *MockStoreMockRecorder) GetEntrie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntrie", reflect.TypeOf((*MockStore)(nil).GetEntrie), ctx, id)
}

// GetListAccount mocks base method.
func (m *MockStore) GetListAccount(ctx context.Context, arg db.GetListAccountParams) ([]db.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListAccount", ctx, arg)
	ret0, _ := ret[0].([]db.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListAccount indicates an expected call of GetListAccount.
func (mr *MockStoreMockRecorder) GetListAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListAccount", reflect.TypeOf((*MockStore)(nil).GetListAccount), ctx, arg)
}

// GetListEntrie mocks base method.
func (m *MockStore) GetListEntrie(ctx context.Context, arg db.GetListEntrieParams) ([]db.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListEntrie", ctx, arg)
	ret0, _ := ret[0].([]db.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListEntrie indicates an expected call of GetListEntrie.
func (mr *MockStoreMockRecorder) GetListEntrie(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListEntrie", reflect.TypeOf((*MockStore)(nil).GetListEntrie), ctx, arg)
}

// GetListTransfers mocks base method.
func (m *MockStore) GetListTransfers(ctx context.Context, arg db.GetListTransfersParams) ([]db.Transfers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransfers", ctx, arg)
	ret0, _ := ret[0].([]db.Transfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTransfers indicates an expected call of GetListTransfers.
func (mr *MockStoreMockRecorder) GetListTransfers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransfers", reflect.TypeOf((*MockStore)(nil).GetListTransfers), ctx, arg)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(ctx context.Context, id uuid.UUID) (db.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(db.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), ctx, id)
}

// GetTransfers mocks base method.
func (m *MockStore) GetTransfers(ctx context.Context, id int64) (db.Transfers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfers", ctx, id)
	ret0, _ := ret[0].(db.Transfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfers indicates an expected call of GetTransfers.
func (mr *MockStoreMockRecorder) GetTransfers(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfers", reflect.TypeOf((*MockStore)(nil).GetTransfers), ctx, id)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, username string) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, username)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(ctx context.Context, arg db.TransferTxParams) (db.TransferResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", ctx, arg)
	ret0, _ := ret[0].(db.TransferResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), ctx, arg)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(ctx context.Context, arg db.UpdateAccountParams) (db.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, arg)
	ret0, _ := ret[0].(db.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), ctx, arg)
}

// UpdateEntrie mocks base method.
func (m *MockStore) UpdateEntrie(ctx context.Context, arg db.UpdateEntrieParams) (db.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntrie", ctx, arg)
	ret0, _ := ret[0].(db.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntrie indicates an expected call of UpdateEntrie.
func (mr *MockStoreMockRecorder) UpdateEntrie(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntrie", reflect.TypeOf((*MockStore)(nil).UpdateEntrie), ctx, arg)
}

// UpdateTransfers mocks base method.
func (m *MockStore) UpdateTransfers(ctx context.Context, arg db.UpdateTransfersParams) (db.Transfers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransfers", ctx, arg)
	ret0, _ := ret[0].(db.Transfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransfers indicates an expected call of UpdateTransfers.
func (mr *MockStoreMockRecorder) UpdateTransfers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransfers", reflect.TypeOf((*MockStore)(nil).UpdateTransfers), ctx, arg)
}
