# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Run unit tests An delpoy

on:
  push:
    branches: [ "main" ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: admin
          POSTGRES_USER: root
          POSTGRES_DB: simple_bank
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
      id: go

    - name: Checkout code into the Go module directory
      uses: actions/checkout@v2

    - name: Install golang-migrate
      run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin/
          sudo chmod +x /usr/local/bin/migrate
          which migrate
          migrate -version

    - name: Run migration
      run: make migrateup

    - name: Set build
      run: go build -v ./...

    # - name: Test
    #   run: make test

  deploy:
    name: Build image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name : Install kubectl
        uses: azure/setup-kubectl@v4
        with:
        version: '1.33' # default is latest stable
        id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::626635403238:role/simple_role
          aws-region: ap-southeast-2
          audience: sts.amazonaws.com

      - name: Debug identity
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Load secrets from AWS Secret manager
        run: aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env

      - name: Build, tag, and push docker image to Amazon ECR 
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simplebank
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t latest .
          docker push -a  $REGISTRY/$REPOSITORY
      - name: Delpoy image to amazon EKS
        run: |
          kubectl apply -f eks/aws-auth.yaml
          kubectl apply -f eks/deployment.yaml
          kubectl apply -f eks/service.yaml
          kubectl apply -f eks/issuer.yaml
          kubectl apply -f eks/ingress.yaml

